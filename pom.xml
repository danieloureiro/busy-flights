<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.travix.medusa</groupId>
	<artifactId>busyflights</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Interview Test</name>
	<description>This is a project skeleton for the Travix Medusa team interview test</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<!-- docker config -->
		<docker.organizationName>travix</docker.organizationName>
		<docker.imageName>postgres</docker.imageName>
		<docker.imageVersion>${project.version}</docker.imageVersion>
		<docker.postgres.version>11.4</docker.postgres.version>
		<docker.dockerFileName>Dockerfile</docker.dockerFileName>
		<docker.push.skip>true</docker.push.skip>
		<docker.scope>compile</docker.scope>

		<!-- maven plugins -->
		<maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
		<tiles-maven-plugin.version>2.13</tiles-maven-plugin.version>
		<maven-enforcer-plugin.version>3.0.0-M1</maven-enforcer-plugin.version>
		<docker-maven-plugin.version>3000.0.0</docker-maven-plugin.version>
		<maven-resources-plugin.version>2.7</maven-resources-plugin.version>
		<maven-dependency-plugin.version>2.8</maven-dependency-plugin.version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<okhttp.version>4.3.1</okhttp.version>
		<h2database.version>1.4.200</h2database.version>
		<springdoc-openapi.version>1.2.15</springdoc-openapi.version>
		<lombok.version>1.18.8</lombok.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
			<version>${h2database.version}</version>
		</dependency>

		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>okhttp</artifactId>
			<version>${okhttp.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>${springdoc-openapi.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-webmvc-core</artifactId>
			<version>${springdoc-openapi.version}</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
			</plugin>
			<plugin>
				<extensions>true</extensions>
				<groupId>io.repaint.maven</groupId>
				<artifactId>tiles-maven-plugin</artifactId>
				<version>${tiles-maven-plugin.version}</version>
				<configuration>
					<buildSmells>dependencymanagement, dependencies, repositories, pluginrepositories</buildSmells>
					<filtering>true</filtering>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.repaint.maven</groupId>
				<artifactId>tiles-maven-plugin</artifactId>
				<inherited>false</inherited>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>docker</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<!-- check configuration -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>${maven-enforcer-plugin.version}</version>
						<executions>
							<execution>
								<id>enforce-property</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireFilesExist>
											<files>
												<file>${project.basedir}/src/main/dckr/Dockerfile</file>
											</files>
										</requireFilesExist>
										<requireProperty>
											<property>docker.imageName</property>
											<message>You must set a docker.imageName property</message>
										</requireProperty>
										<requireProperty>
											<property>docker.organizationName</property>
											<message>You must set a docker.organizationName</message>
										</requireProperty>
									</rules>
									<fail>true</fail>
								</configuration>
							</execution>
							<execution>
								<id>warn-push</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireProperty>
											<property>docker.push.skip</property>
											<message>You must set a docker.push.skip property</message>
											<regex>(?i)true</regex>
											<regexMessage>
												By default projects should not push to docker registry
											</regexMessage>
										</requireProperty>
									</rules>
									<fail>false</fail>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- copy dependencies into the resources dir -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<version>${maven-dependency-plugin.version}</version>
						<executions>
							<execution>
								<id>copy-dependencies</id>
								<phase>compile</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/dckr/resources</outputDirectory>
									<excludeTransitive>true</excludeTransitive>
									<includeScope>${docker.scope}</includeScope>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- copy dockerfile & resources -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>${maven-resources-plugin.version}</version>
						<executions>
							<execution>
								<id>prepare-dockerfile</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/dckr</outputDirectory>
									<resources>
										<!-- filtered resources -->
										<resource>
											<directory>${project.basedir}/src/main/dckr</directory>
											<filtering>true</filtering>
											<includes>
												<include>Dockerfile</include>
												<include>**/*.txt</include>
												<include>**/*.sh</include>
												<include>**/*.py</include>
												<include>**/*.pl</include>
												<include>**/*.json</include>
												<include>**/*.rb</include>
												<include>**/*.yml</include>
												<include>**/*.yaml</include>
												<include>**/*.ini</include>
											</includes>
										</resource>
										<!-- non-filtered resources (reverse matching rule) -->
										<resource>
											<directory>${project.basedir}/src/main/dckr/</directory>
											<filtering>false</filtering>
											<excludes>
												<exclude>Dockerfile</exclude>
												<exclude>**/*.txt</exclude>
												<exclude>**/*.sh</exclude>
												<exclude>**/*.py</exclude>
												<exclude>**/*.pl</exclude>
												<exclude>**/*.json</exclude>
												<exclude>**/*.rb</exclude>
												<exclude>**/*.yml</exclude>
												<exclude>**/*.yaml</exclude>
												<exclude>**/*.ini</exclude>
											</excludes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- build -->
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker-maven-plugin.version}</version>
						<configuration>
							<verbose>true</verbose>
							<useColor>true</useColor>
							<images>
								<image>
									<name>
										${docker.organizationName}/${docker.imageName}
									</name>
									<build>
										<tags>
											<tag>${docker.imageVersion}</tag>
										</tags>
										<contextDir>${project.build.directory}/dckr</contextDir>
										<dockerFile>${docker.dockerFileName}</dockerFile>
									</build>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>build</id>
								<phase>compile</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>remove</id>
								<phase>clean</phase>
								<goals>
									<goal>stop</goal>
									<goal>remove</goal>
								</goals>
							</execution>
							<execution>
								<id>push</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<skip>${docker.push.skip}</skip>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
